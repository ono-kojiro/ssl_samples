#!/bin/sh


show_help=0

help() {
  echo "usage : $0 <target>"
  cat - << EOS
  target
    init                  init database and ca
    crt                   create server.crt
    clean                 remove database
    destroy               remove database directory
    list                  show certificate

  variables:
    default ca_name    : $ca_name   (change CA_NAME environment variable)
    cacert             : $cacert

    default input csr  : $input
    default output crt : $output
EOS

}

clean() {
	echo clean database
	rm -rf ${database}
	rm -f ${cacert}
}

list() {
	certutil -L -d ${database}
}

db() {
  if [ "$show_help" != "0" ]; then
    echo "usage: $0 init"
    exit 1
  fi

  mkdir -p ${database}
  rm -f ${database}/*

  echo create database ${database}
  certutil -N -d ${database} --empty-password
}


ca() {
  if [ -z "$ca_name" ]; then
    echo "ERROR : no ca_name option"
    exit 1
  fi

  echo make a certificate, ${database}
  echo $password > password.txt
  dd if=/dev/urandom of=noise.bin bs=1 count=2048 > /dev/null 2>&1
  echo "initialize CA, $database"

  mkdir -p ${database}

  printf 'y\n0\ny\n' | \
  certutil -S \
	-x \
	-d ${database} \
	-z noise.bin \
	-n "$ca_name" \
	-s "cn=${ca_name}" \
	-t "CT,C,C" \
	-m $RANDOM \
	-k rsa \
	-g 2048 \
	-Z SHA256 \
	-f password.txt \
	-v $months_valid \
	-2
 
  echo export ${cacert}
  mkdir -p ${database}
  certutil -L -d ${database} \
    -n "$ca_name" -a > ${cacert}
  
  rm -f password.txt noise.bin
}

init()
{
  db
  ca
}

crt() {
  if [ "$show_help" != "0" ]; then
    echo "usage : $0 --output output.crt --input input.csr addr1 addr2 ..."
    exit 1
  fi

  ret=0
  if [ -z "$output" ]; then
    echo "ERROR : no output option"
    ret=`expr $ret + 1`
  fi
  
  if [ -z "$input" ]; then
    echo "ERROR : no input option"
    ret=`expr $ret + 1`
  fi

  if [ "$#" -eq 0 ]; then
    echo "no server addresses"
    ret=`expr $ret + 1`
  fi
  
  if [ $ret != 0 ]; then
    exit $ret
  fi
    
  server_addrs="$@"

  echo CA: create ${output}
  echo $password > password.txt

  extsan="dns:localhost"
  for addr in $server_addrs; do
    extsan="$extsan,ip:$addr"
  done
		
  #-x \
  cmd="certutil -C"
  cmd="$cmd -c $ca_name"
  cmd="$cmd -i ${input}"
  cmd="$cmd -a"
  cmd="$cmd -o ${output}"
  cmd="$cmd -f password.txt"
  cmd="$cmd --extSAN $extsan"
  cmd="$cmd -v 120"
  cmd="$cmd -d ${database}"
  
  echo $cmd
  $cmd
  if [ "$?" -ne 0 ]; then
    echo "ERROR : certutil failed"
    exit 1
  fi

  echo "generated ${output}"
  rm -f password.txt
}

vars()
{
  echo "ca_name      : ${ca_name}"
  echo "database     : ${database}"
  echo "cacert       : ${cacert}"
  echo "input        : ${input}"
  echo "output       : ${output}"
  echo "server_addr  : ${server_addr}"
}

clean()
{
  rm -f ${database}/*.pem
}

destroy()
{
  rm -rf ${database}
}

if [ "$#" -eq 0 ]; then
  help
  exit 1
fi

subcmd=$1
shift
	
num=`LANG=C type $subcmd | grep 'function' | wc -l`
if [ "$num" -eq 0 ]; then
  echo \"$subcmd\" is not a function.
  exit 2
fi

args=""

while [ "$#" != "0" ]; do
  case $1 in
    -h | --help)
      show_help=1
      ;;
    -c | --ca_name)
      shift
      ca_name=$1
      ;;
    -d | --database)
      shift
      database=$1
      ;;
    -i | --input)
      shift
      input=$1
      ;;
    -o | --output)
      shift
      output=$1
      ;;
    *)
      break
      ;;
  esac

  shift
done

ca_name="${ca_name:-"MyCA"}"
cabase=`echo $ca_name | tr '[:upper:]' '[:lower:]'`

database="${database:-$HOME/.local/share/$ca_name}"
cacert="${database}/${cabase}.pem"

password=${password:-"secret"}
months_valid=120

input=${input:-"$HOME/.local/share/MyServer/myserver.csr"}
output=${output:-"$HOME/.local/share/MyServer/myserver.crt"}

$subcmd "$@"

