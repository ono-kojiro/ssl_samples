#!/bin/sh

help() {
	echo "usage : $0 <target>"
  cat - << EOS
  target :
    clean
    init
    csr     create server.csr
    load    import server.crt
    list    show list of certificate
    save    export server.key
EOS

}

clean() {
  rm -f ${database}/*.csr
  rm -f ${database}/*.crt
  rm -f ${database}/*.key
}

destroy()
{
  rm -rf ${database}
}

list() {
  certutil -L -d ${database}
}

db() {
  rm -rf ${database}
  mkdir -p ${database}

  echo create database ${database}
  dd if=/dev/urandom of=noise.bin bs=1 count=2048 > /dev/null 2>&1
  certutil -N -d ${database} --empty-password
  rm -f noise.bin
}

csr()
{
	echo "create csr, $csrpath"
	mkdir -p ${database}
	echo ${password} > password.txt
	dd if=/dev/urandom of=noise.bin bs=1 count=2048 > /dev/null 2>&1
	
    certutil -R \
		-d ${database} \
		-s "cn=$server" \
		-f password.txt \
		-z noise.bin \
		-o $csrpath \
		-a 

	rm -f password.txt noise.bin
}

init() {
  db
}


load()
{
	echo "import $crtpath"
	certutil -A -d ${database} \
		-n "${servername}" \
		-t ",," \
		-i $crtpath
}

save()
{
	p12
	seckey
	jks
}

p12()
{
  echo export $p12path
  cmd="pk12util -o $p12path"
  cmd="$cmd -n ${servername}"
  cmd="$cmd -d ${database}"
  cmd="$cmd -W ${password}"
  echo $cmd
  $cmd
}

seckey()
{
  echo export $pemfile
  cmd="openssl pkcs12"
  cmd="$cmd -in  $p12path"
  cmd="$cmd -nocerts"
  cmd="$cmd -out $pemfile"
  cmd="$cmd -password \"pass:${password}\""
  cmd="$cmd -nodes"

  echo $cmd
  $cmd

  cmd="openssl rsa -in  $pemfile -out $keyfile"
  echo $cmd
  $cmd
}

jks()
{
	echo export $database/$server.jks
	rm -f $database/$server.jks
	LANG=C keytool -importkeystore \
		-srckeystore $database/$server.p12 \
		-srcstoretype PKCS12 \
		-deststoretype JKS \
		-destkeystore $database/$server.jks \
		-storepass "${password}" \
		-keypass "${password}" \
		-destkeypass "${password}" \
		-srcstorepass "${password}"

	# ubuntu:
	# edit /etc/default/jenkins
	#
	# HTTPS_PORT=8443
	# KEYSTORE=/var/lib/jenkins/jenkins.jks
	# PASSWORD=secret
	# JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpsPort=$HTTPS_PORT --https    KeyStore=$KEYSTORE --httpsKeyStorePassword=$PASSWORD --httpPort=$HTTP_PORT"
	#

}

vars()
{
  echo "csrpath : $csrpath"
}

destroy()
{
  rm -rf ${database}
}

args=""

while [ "$#" != "0" ]; do
  case $1 in
    -s | --server)
      shift
      server=$1
      ;;
    -d | --database)
      shift
      database=$1
      ;;
    --csr )
      shift
      csrpath=$1
      ;;
    --crt )
      shift
      crtpath=$1
      ;;
    --p12 )
      shift
      p12path=$1
      ;;
    -a | --address)
      shift
      address=$1
      ;;
    *)
      args="$args $1"
      ;;
  esac

  shift
done

servername=${servername:-"MyServer"}
database=${database:-"$HOME/.local/share/$servername"}

server=`echo $servername | tr '[:upper:]' '[:lower:]'`

password=${password:-"secret"}

csrpath=${csrpath:-"${database}/${server}.csr"}
crtpath=${crtpath:-"${database}/${server}.crt"}
  
p12path=${p12path:="${database}/${server}.p12"}
pemfile=${database}/${server}.key.pem
keyfile=${database}/${server}.key


if [ -z "${args}" ]; then
  help 
  exit 1
fi

for target in $args; do
  LANG=C type -t $target | grep 'function' > /dev/null 2>&1
  if [ "$?" = "0" ]; then
    $target
  else
    echo target \"$target\" is not a function.
  fi
done

